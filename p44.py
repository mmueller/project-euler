#!/usr/bin/env python

"""
Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of
D?
"""

# 1-based array to cache pentagonal results
pentagonals = [-1]
pentagonal_set = set()

def P(n):
    if n < 1:
        raise "P(%d) is invalid." % n
    for i in xrange(len(pentagonals), n+1):
        p = i * (3*i - 1) / 2
        pentagonals.append(p)
        pentagonal_set.add(p)
    return pentagonals[n]

def is_pentagonal(num):
    while pentagonals[-1] < num:
        P(len(pentagonals))
    return num in pentagonal_set

def is_p44_pair(x, y):
    return is_pentagonal(x + y) and is_pentagonal(abs(x - y))

if __name__ == '__main__':
    # Cover two-dimensional space with a target sum for the pair of points
    s = 2
    done = False
    while not done:
        for j in xrange(1, (s/2)+1):
            k = s - j
            if is_p44_pair(P(j), P(k)):
                print 'j:\t%d\tk:\t%d' % (j, k)
                print 'P(j):\t%d\tP(k):\t%d' % (P(j), P(k))
                print 'D:\t%d' % abs(P(j) - P(k))
                done = True
                break
        s += 1

